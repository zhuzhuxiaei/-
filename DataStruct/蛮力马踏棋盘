/*
这个是最早写的马踏
没有用到算法，相当于遍历
跑了两个小时没跑出来，当然时间允许的话能跑出来
不会出现死循环，但效率还是很低
*/
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <windows.h>
bool judgeISUSED(int x,int y,int a[8][8]);
bool judgeISOUT(int x,int y);
int pushzhan(int count,int x,int y,int direct);
typedef struct{
	int x;
	int y;
	int direct;
}da;
da zhan[64];
da *point;
int firstx,firsty;
int main(){
	 int a[8][8]={0};
	
	 int x=0,y=0;
	 int xNext[8],yNext[8];
	 int count=0;
	 printf("请输入坐标");
	 scanf("%d %d",&x,&y);
	 firstx=x;firsty=y;
	 a[x][y]=count;
	 while(true){
	   xNext[0]=xNext[3]=x+1;
	   xNext[4]=xNext[7]=x-1;
		 xNext[1]=xNext[2]=x+2;
		 xNext[5]=xNext[6]=x-2;
			
		 yNext[0]=yNext[7]=y+2;
		 yNext[1]=yNext[6]=y+1;
		 yNext[2]=yNext[5]=y-1;
		 yNext[3]=yNext[4]=y-2;
	
		 printf("\n终极查看count  %d\n",count); 
		 printf("-----%d %d-----\n",x,y);
		 for(int i=0;i<=7;i++){
		
			if(!judgeISUSED(xNext[i],yNext[i],a)&&!judgeISOUT(xNext[i],yNext[i])){
			 
				a[x][y]=count;
				pushzhan(count,x,y,i);//下代有人 才能入栈 
				count++;
				printf("这个点的direct%d\n",point->direct);
				x=xNext[i],y=yNext[i];
				break;		
			}
		s:	if(i==7)
			{	//切记退栈时要把栈中的数据抹去 
				
				x=point->x;
				y=point->y;
				i=point->direct;
				point->x=0;
				point->y=0;
				point->direct=0; 
				a[x][y]=0;
				
				 
				point--;
				count--;
				if(i==7) goto s;
			
  	          xNext[0]=xNext[3]=x+1;
	  		    	xNext[4]=xNext[7]=x-1;
		 		      xNext[1]=xNext[2]=x+2;
			        xNext[5]=xNext[6]=x-2;
			
 	            yNext[0]=yNext[7]=y+2;
			        yNext[1]=yNext[6]=y+1;
			      	yNext[2]=yNext[5]=y-1;
   	          yNext[3]=yNext[4]=y-2;
			 
			  
				continue;
				//退栈 
			}
		}
		if(count==64) break;
	 }
 	return 0;
}
bool judgeISUSED(int x,int y,int a[8][8]){
	if(a[x][y]==0&&(x!=firstx||y!=firsty)) return false;	
	else return true;//如果用过就会返回true
}
bool judgeISOUT(int x,int y){
	if(x<0||x>7||y<0||y>7) return true;
	else return false;//如果超出就会返回true
}
int pushzhan(int count,int x,int y,int direct){
	zhan[count].x=x;
	zhan[count].y=y;
	zhan[count].direct=direct;
	point=&zhan[count];
	return 0;
}
