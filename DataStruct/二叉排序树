/*
1．	进行二叉排序树的结点等类型的相关定义。
2．	编写一个子程序递归地查找二叉排序树。
3．	向二叉排序树中插入元素。这个过程利用前面的查找子程序，若找到同样的关键字，
则返回FALSE，否则插入该元素，并保持结果仍然是二叉排序树，返回TRUE。
4．	利用上述插入元素的算法，生成一棵二叉排序树。
5．	编写一个子程序删除二叉排序树中指定关键字的元素。
*/
#include <stdio.h>
#include <stdlib.h>
typedef struct DA tree;
struct DA{
	tree* left;//右边大，左边小 
	tree* right;
	tree* father; 
	int value;	
};
tree* createTree();
tree* insert_or_search_Tree(tree* treeroot);
tree* digui(tree* fathertree,int command);
tree* digui2(tree* thistree);
int deleteTree(tree* treeroot);
int viewTree(tree* treeroot);
int main(){
	int command=0;
	tree* treeroot=createTree();
	while(1){
		printf("1，查找或插入\n2,删除\n3,查看\n"); 
		scanf("%d",&command);
		if(command==1){
			insert_or_search_Tree(treeroot);	
		}else if(command==2){
			deleteTree(treeroot);
		}else if(command==3){
			viewTree(treeroot);
		}else break;
	}
}
tree* createTree(){
	printf("请输入根节点的值\n-------");
	tree* treeroot=(tree*)malloc(sizeof(tree));
	treeroot->left=NULL;
	treeroot->right=NULL;
	treeroot->father=NULL;
	scanf("%d",&treeroot->value);
	fflush(stdin);	
	return treeroot;
}
tree* insert_or_search_Tree(tree* treeroot){
	printf("输入值\n-------");
	int command;
	scanf("%d",&command);
	tree* newtree=digui(treeroot,command);
	return newtree;
}
tree* digui(tree* fathertree,int command){ 
	if(command>fathertree->value){ 
		if(fathertree->right==NULL){
			tree* newtree=(tree*)malloc(sizeof(tree));
			newtree->value=command;
			newtree->father=fathertree;
			newtree->left=NULL;
			newtree->right=NULL;
			fathertree->right=newtree;
			return newtree;
		}else{
			tree* newtree=digui(fathertree->right,command);
			return newtree;
		}
	}else 
	if(command<fathertree->value){
		if(fathertree->left==NULL){
			tree* newtree=(tree*)malloc(sizeof(tree));
			newtree->value=command;
			newtree->father=fathertree;
			newtree->left=NULL;
			newtree->right=NULL;
			fathertree->left=newtree;	
			return newtree; 
		}else{
			tree* newtree=digui(fathertree->left,command);
			return newtree;
		}
	}else{//相等，代表返回当前父亲 
		printf("该数存在\n"); 
		return fathertree;
	}	
}
int deleteTree(tree* treeroot){
	tree* thetree=insert_or_search_Tree(treeroot);
	if(treeroot==thetree) printf("请勿删除根节点"); 
	//分为四种情况，1，左右皆无。2，左有右无。3左无右有 。4左右皆有。 
	if(thetree->left==NULL&&thetree->right==NULL){
		if(thetree->value>thetree->father->value){
			thetree->father->right=NULL;
		}else thetree->father->left=NULL;
		free(thetree);	
	}
	else 
	if(thetree->left!=NULL&&thetree->right==NULL){
		if(thetree->value>thetree->father->value){//右子树
			thetree->father->right=thetree->left;
			thetree->left->father=thetree->father;
			thetree=NULL; 
			}else{
			thetree->father->left=thetree->left;
			thetree->left->father=thetree->father;
			thetree=NULL;
		}
		free(thetree);
	}
	else
	if(thetree->left==NULL&&thetree->right!=NULL){
		if(thetree->value>thetree->father->value){
			thetree->father->right=thetree->right;
			thetree->right->father=thetree->father;
			thetree=NULL;
		}else{
			thetree->father->left=thetree->left;
			thetree->right->father=thetree->father;
			thetree=NULL;
		}
		free(thetree);
	}
	else{//左右皆有,有两种调法，左子树的最右子树或是右子树的最左子树 ,这里选前者 
		if(thetree->value>thetree->father->value){
			tree* treechange=digui2(thetree->left);
			//zhizhenjiaohuan
			treechange->father->right=treechange->left;
			treechange->left->father=treechange->father;
			thetree->father->right=treechange;
			treechange->father=thetree->father;
			treechange->right=thetree->right;
			thetree->right->father=treechange;
			treechange->left=thetree->left;
			thetree->left->father=treechange;
			thetree=NULL;			
		}else{
			tree* treechange=digui2(thetree->left);
			//zhizhenjiaohuan
			treechange->father->right=treechange->left;
			treechange->left->father=treechange->father;
			thetree->father->left=treechange;
			treechange->father=thetree->father;
			treechange->right=thetree->right;
			thetree->right->father=treechange;
			treechange->left=thetree->left;
			thetree->left->father=treechange;	
			thetree=NULL;		
		}
		free(thetree);
	}
	printf("删除成功\n");
	return 0;
}
tree* digui2(tree* thistree){
	if(thistree->right!=NULL) thistree=digui2(thistree->right);
	return thistree;
}
int viewTree(tree* treeroot){
	tree *temp=treeroot;
	//viewleft	
	if(temp->left!=NULL) viewTree(temp->left);
	//viewhimself
 	printf("-----%d\n",temp->value);
	//viewright
	if(temp->right!=NULL) viewTree(temp->right); 
	return 0;
} 
