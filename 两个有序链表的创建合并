#include <stdio.h>
#include <stdlib.h>
#define test printf("hellp") 
typedef struct DA list;
struct DA{
		list* next;
		int value;
};
list* creatList();
list* joinList(list* alist,list* blist);
list* sortList(list* alist);
int printList(list* alist); 
int main(){
		list* alist=creatList();
		alist=sortList(alist);
		list* blist=creatList();
		blist=sortList(blist);
		list* clist=joinList(alist,blist);
		printList(clist);
}
list* creatList(){
		printf("输入-1退出");
		list* firstlist=(list*)malloc(sizeof(list));
		scanf("%d",&firstlist->value);
		firstlist->next=NULL;
		list* templist=firstlist;
		int temp;
		while(1){
				temp=0;
				scanf("%d",&temp);
				if(temp==-1){
						break;
				}
				list* newlist=(list*)malloc(sizeof(list));
				newlist->value=temp;
				newlist->next=NULL;
				templist->next=newlist;
				templist=newlist;
		}
		return firstlist;
}
list* joinList(list* alist,list* blist){
		list* temp;
		list* clist;
		list* blistnext=NULL;
		if(alist->value<=blist->value) clist=alist;
		else clist=blist;
		temp=clist;
		list* Clist=clist; 
		while(1){
				if(blist==NULL) break;
				while(clist->value<=blist->value){
						temp=clist;
						clist=clist->next;
						if(clist==NULL){
								temp->next=blist;
								break;
						}
				}
				if(clist==NULL) break;
				temp->next=blist;
				blistnext=blist->next;
				blist->next=clist;
				temp=blist;
				blist=blistnext;
				
		}
		return Clist;
}
list* sortList(list* alist){//36951
		list* tail=alist;
		list* head=alist;
		list* compare=NULL;
		list* nextcompare=alist->next;
		list* judge=NULL;
		list* judgebefore=NULL;
		while(1){
			tail->next=NULL;
		s:	compare=nextcompare;
			judge=head;
			if(compare==NULL) break;
			while(compare->value>judge->value){
					if(judge==tail){//judge到达tail
							nextcompare=compare->next;
							judge->next=compare;
							tail=compare;
							goto s;
					}
					judgebefore=judge;
					judge=judge->next;
			}//judge未至tail
			if(judge==head){//judge未动
					nextcompare=compare->next;
					compare->next=head;
					head=compare;
			}
			else{//judge在中间
					nextcompare=compare->next;
					compare->next=judge;
					judgebefore->next=compare;
			}
		} 
		return head;
}
int printList(list* alist){
		while(alist!=NULL){
					printf("%d\n",alist->value);
					alist=alist->next;
		}
		return 0;
}
