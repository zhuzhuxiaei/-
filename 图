/*
图的存储和遍历
1．	编写一个子程序创建邻接矩阵。它从键盘输入数据。
2．	编写一个子程序，将邻接矩阵转换为邻接表。
3．	通过深度优先搜索遍历该邻接表，形成的森林用二叉链表存储。
4．	用凹入法打印森林。
*/
//对我们而言，每个节点的符号是什么不关心，
//重要的是每个节点的index
#include <stdio.h>
#include <stdlib.h>
typedef struct DA da;
struct DA{
	int *point;//矩阵指针，用于操作node之间的关系
	int *Node;//每个节点的value值数组
};
typedef struct LIST list;
struct LIST{
	int value;//每个邻接链表节点的值	
	list* next;//每个邻接链表节点的下个节点
};
typedef struct TREE tree;
struct TREE{
	tree* son;
	tree* brother;
};
int flag[size]={-1};
da* creatJUZHENG(int size);
list* changeJuzhentoList(da* ds,int size);
int generateTree(int indexofflag,list* list_header,int indexofnode,int size,tree* my_tree);
tree* changeListoTree(list* list_header,int size,int nextindex);
int main(){
	printf("输入节点个数\n");	
	int size=0;
	scanf("%d",&size);
	fflush(stdin);
	da *ds;
	ds=creatJUZHENG(size);
}
da* creatJUZHENG(int size){//函数返回结构体指针
	da* ds=(da*)malloc(sizeof(da));
	ds->point=(int*)malloc(sizeof(int)*size*size);//矩阵，用于存放Node之间的关系
	ds->Node=(int*)malloc(sizeof(int)*size);//创建的Node是数组，用于存放value
	printf("下标从0行0列开始\n");
	//搭建节点
	for(int i=0;i<=size-1;i++){
		printf("输入第%d个节点的值\n");
		scanf("%c",(ds->Node)+i);
		fflush(stdin);
	}
	//赋值0 
	for(int i=0;i<=size*size-1;i++){
		*(ds->point+i)=0;
	} 
	while(1){
		int x=0,y=0; 
		printf("输入邻接矩阵的非0坐标,如果输入完毕则输入-1 -1\n");
		scanf("%d %d",&x,&y);
		fflush(stdin);
		if(x==-1) return 0;
		*(ds->point+(x*size)+y)=1;
		*(ds->point+(y*size)+x)=1; 
	}
	return ds;	
} 
list* changeJuzhentoList(da* ds,int size){
	list* list_header=(list*)malloc(sizeof(list)*size);
	for(int i=0;i<=size-1;i++){
		list* pointnow=list_header+i;
		pointnow->value=i;//第一个节点的值是他自己
		pointnow->next=NULL;//至此首节点初始化完毕		
		for(int j=0;j<=size-1;j++){
			if(*(ds->point+(i*size)+j)==1){
				list* newlistnode=(*list)malloc(sizeof(list));
				newlistnode->value=j;
				pointnow->next=newlistnode;
				pointnow=newlistnode;
				pointnow->next=NULL;
			}
		}
		
	}
	return list_header;
}
tree* changeListoTree(list* list_header,int size,int nextindex){
	tree* treeroot=(tree*)malloc(sizeof(tree));
	int indexofflag=0;
	for(int j=0;j<=size-1;j++){
		int judge=0;
		for(int i=0;i<=size-1;i++){
			if(flag[i]==(list_header+j)->value){
				judge=1;
				break;	
			}
		}
		if(judge=0) indexofflag=generateTree(indexofflag,list_header,j,size,treeroot)+1;
	}
}
int generateTree(int indexofflag,list* list_header,int indexofnode,int size,tree* my_tree){
	flag[indexofflag]=indexofnode;
	list* list_header_now=list_header+indexofnode;
	tree* new_tree=(tree*)malloc(sizeof(tree));
	new_tree->son=NULL;
	new_tree->brother=my_tree->son;
	my_tree->son=new_tree;//完成这个树节点的搭建
	while(1){
		list_header_now=list_header_now->next;
		if(list_header_now==NULL){
			break;
		}
		int judge=0;
		for(int i=0;i<=size-1;i++){//循环flag数组看是否入栈，修改judge的值
			if(flag[i]==list_header_now->value){ 
				judge=1;
				break;
			} //已经存在于flag数组中
		}	
		if(judge==0){
			indexofflag++;
			indexofflag=generateTree(indexofflag,list_header,list_header_now->value,size,new_tree);
		}
	}	
	return indexofflag;
}
